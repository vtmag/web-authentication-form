import { ClassHelpers, ObjCreator, Realm, UpdateMode, binding } from "./internal";
export declare function toArrayBuffer(value: unknown, stringToBase64?: boolean): ArrayBuffer;
/**
 * Helpers for converting a value to and from its binding representation.
 * @internal
 */
export type TypeHelpers<T = unknown> = {
    toBinding(value: T, options?: {
        createObj?: ObjCreator;
        updateMode?: UpdateMode;
        isQueryArg?: boolean;
    }): binding.MixedArg;
    fromBinding(value: unknown): T;
};
/** @internal */
export type TypeOptions = {
    realm: Realm;
    name: string;
    optional: boolean;
    objectType: string | undefined;
    objectSchemaName: string | undefined;
    getClassHelpers(nameOrTableKey: string | binding.TableKey): ClassHelpers;
};
/**
 * Convert an SDK value to a Binding value representation.
 * @param realm The Realm used.
 * @param value The value to convert.
 * @param options Options needed.
 * @param options.isQueryArg Whether the value to convert is a query argument used
 *  for `OrderedCollection.filtered()`. If so, this will be validated differently.
 * @returns The `MixedArg` binding representation.
 * @internal
 */
export declare function mixedToBinding(realm: binding.Realm, value: unknown, { isQueryArg }?: {
    isQueryArg: boolean;
}): binding.MixedArg;
/** @internal */
export declare function toItemType(type: binding.PropertyType): number;
export declare function getTypeHelpers(type: binding.PropertyType, options: TypeOptions): TypeHelpers;
